#!/bin/bash -e

# The configure hook is called every time one the following actions happen:
# - initial snap installation
# - snap refresh
# - whenever the user runs snap set|unset to change a configuration option

# Define a function to log and echo messages
source $SNAP/usr/bin/utils.sh

# # Define the top-level key and the list of valid keys
VALID_DRIVER_KEYS=(
  "name"         
  "parent-frame"
  "camera-model"
  "cam-pos-x"
  "cam-pos-y"
  "cam-pos-z"
  "cam-roll"
  "cam-pitch"
  "cam-yaw"
  "camera-params"
  "ffmpeg-params"
)

# common

validate_keys "driver" VALID_DRIVER_KEYS[@]

# validate driver.name
validate_regex "driver.name" '^[a-z_-]{1,10}$'

# validate driver.parent-frame
validate_regex "driver.parent-frame" '^[a-z_-]{1,40}$'

# validate driver.camera-model
VALID_CAMERA_MODEL_OPTIONS=("OAK-D" "OAK-D-LITE")
validate_option "driver.camera-model" VALID_CAMERA_MODEL_OPTIONS[@]

# validate driver.cam-x
validate_float "driver.cam-pos-x"
validate_float "driver.cam-pos-y"
validate_float "driver.cam-pos-z"
validate_float "driver.cam-roll"
validate_float "driver.cam-pitch"
validate_float "driver.cam-yaw"

# export LD_LIBRARY_PATH=$SNAP/usr/lib/$(uname -m)-linux-gnu/pulseaudio:$SNAP/usr/lib/$(uname -m)-linux-gnu/blas:$SNAP/usr/lib/$(uname -m)-linux-gnu/lapack:$LD_LIBRARY_PATH

# validate driver.camera-params
validate_config_param "driver.camera-params" "camera-params-VALUE.yaml"

# validate driver.ffmpeg-params
validate_config_param "driver.ffmpeg-params" "ffmpeg-params-VALUE.yaml"

$SNAP/usr/bin/configure_hook_ros.sh

# restart services with new ROS 2 config
for service in daemon; do
  if snapctl services ${SNAP_NAME}.${service} | grep -qw enabled; then
    snapctl restart ${SNAP_NAME}.${service}
    log "Restarted ${SNAP_NAME}.${service}"
  fi
done


